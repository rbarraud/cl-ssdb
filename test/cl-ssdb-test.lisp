(in-package :cl-user)

(defpackage cl-ssdb-test
  (:use :cl :prove))

(in-package :cl-ssdb-test)

(defvar *ssdb-auth* "8AgYA/ougM9DCvtS9l172ddhb+v/nIAPvVpJjMdzHz0VnkB6Ji3qC904O1XuOj+6ZD9cqJq3xgsPQRUzGDA9YZfI8z/hA5G6fIxnB9g/VLUo4GrEHRJ5bMV3h8MknaHreQQ7wjxuzgkNLfrxsev6ZULCXWUizbNU3hthMIQjjtS6L+yRnOcKBH+f7IsCyZJsikCmNSFpyN2DaKqFnqTJphueuodkKAqK+N3iCjsrhuucvW3GkZOpXkBILicSDZ36dXQnKDQPctr8w4RTLzbg0lb7b5qcO134A6aVRl4WrBScwRf6HNB+r0p+8zeWAcmdtIQbYwY0wh7A6tS0mWOpTTD5BQCiqL+WwZkL3i2K3wAK0tx3WI9g8I4k8JBwxdLwi0I1UW2dF5oMpk4KppB6nqckya4ybkyGAFw6op3IhAa6m/jvWZUaZrN8im/tlcCoDFfQCywWx4V06eqa35221c+9DbpXfFvJcFxZ6xKJkf0I34SIarLI+pVqm/k3Q0Dc")

(defmacro with-test-db (&body body)
  `(ssdb:with-connection ()
     (ssdb:auth *ssdb-auth*)
     (ssdb:flushdb)
     (unwind-protect
          (progn ,@body)
       (ssdb:flushdb))))

(plan nil)

(subtest "Testing connection"
  (is nil (ssdb:disconnect))
  (let ((connection (ssdb:connect)))
    (is t (ssdb::connection-open-p connection)))
  (is-error (ssdb:connect) 'ssdb:ssdb-error)
  (is nil (ssdb:disconnect))
  (ssdb:with-connection ()
    (is-error (ssdb:ping) 'ssdb:ssdb-error-reply)
    (is "ok" (ssdb:auth *ssdb-auth*))
    (is "ok" (ssdb:ping))))

;;; test Server commands
(subtest "Testing Server Commands"
  (with-test-db
    (is "ok" (ssdb:ping))
    (is "ok" (ssdb:clear_binlog))
    (is "ok" (ssdb:compact))
    (is-type (ssdb:dbsize) 'integer)
    (is-type (ssdb:info) 'string)))

;; test flushdb
(subtest "Testing flushdb"
  (ssdb:with-connection ()
    (ssdb:auth *ssdb-auth*)
    (ssdb:flushdb)
    (is-values (ssdb:flushdb)
               '(0
                 ("kv" . 0)
                 ("hash" . 0)
                 ("zset" . 0)
                 ("list" . 0)))
    (is "ok" (ssdb:set "key1" "value1"))
    (is t (ssdb:hset "hkey1" "field1" "value1"))
    (is t (ssdb:hset "hkey2" "field1" "value1"))
    (is t (ssdb:zset "zkey1" "field1" 1))
    (is t (ssdb:zset "zkey2" "field1" 1))
    (is t (ssdb:zset "zkey3" "field1" 1))
    (is 1 (ssdb:qpush "lkey1" "item1"))
    (is 1 (ssdb:qpush "lkey2" "item1"))
    (is 1 (ssdb:qpush "lkey3" "item1"))
    (is 1 (ssdb:qpush "lkey4" "item1"))
    (is-values (ssdb:flushdb)
               '(10
                 ("kv"   . 1)
                 ("hash" . 2)
                 ("zset" . 3)
                 ("list" . 4)))))

;; test kv commands
(subtest "Testing kv commands"
  (with-test-db
    (subtest "Testing set get exists del"
      (is (ssdb:set "key1" "value1")    "ok")
      (is (ssdb:get "key1")             "value1")
      (is (ssdb:set "key1" "value2")    "ok")
      (is (ssdb:get "key1")             "value2")
      (is (ssdb:set "key1" "value1")    "ok")
      (is (ssdb:get "key1")             "value1")
      (is (ssdb:exists "key1")          t)
      (is (ssdb:del "key1")             "ok")
      (is (ssdb:exists "key1")          nil))
    (subtest "Testing getset 1"
      (is (ssdb:set "key1" "value1")    "ok")
      (is (ssdb:get "key1")             "value1")
      (is (ssdb:getset "key1" "value2") "value1")
      (is (ssdb:get "key1")             "value2")
      (is (ssdb:del "key1")             "ok"))
    (subtest "Testing getset 2"
      (is (ssdb:getset "not-exists-key" "value2") nil)
      (is (ssdb:exists "not-exists-key") t)
      (is (ssdb:get "not-exists-key")   "value2")
      (is (ssdb:del "not-exists-key")   "ok"))
    (subtest "Testing multi_set multi_get multi_del"
      (ssdb:del "key1")
      (ssdb:del "key2")
      (ssdb:del "key3")
      (is (ssdb:multi_set "key1" "value1" "key2" "value2" "key3" "value3") 3)
      (is (ssdb:exists "key1")          t)
      (is (ssdb:exists "key2")          t)
      (is (ssdb:exists "key3")          t)
      (is (ssdb:get "key1")             "value1")
      (is (ssdb:get "key2")             "value2")
      (is (ssdb:get "key3")             "value3")
      (is (ssdb:multi_get "key1" "key2" "key3")
          '("key1" "value1" "key2" "value2" "key3" "value3")
          :test #'equal)
      (is (ssdb:multi_get "key1" "key2" "not-exists-key")
          '("key1" "value1" "key2" "value2")
          :test #'equal)
      (is (ssdb:multi_get "not-exists-key") nil)
      (is (ssdb:multi_del "key1" "key2" "key3") 3)
      (is (ssdb:exists "key1")          nil)
      (is (ssdb:exists "key2")          nil)
      (is (ssdb:exists "key3")          nil)
      (is (ssdb:multi_del "not-exists-key") 1)
      (is (ssdb:multi_del "not-exists-key" "not-exists-key2") 2))
    (subtest "Testing incr"
      (is (ssdb:set "key1" 1)           "ok")
      (is (ssdb:get "key1")             "1")
      (is (ssdb:incr "key1")            2)
      (is (ssdb:incr "key1" 2)          4)
      (is (ssdb:set "key1" "value1")    "ok")
      (is-error (ssdb:incr "key1")      'ssdb:ssdb-error-reply))
    (subtest "Testing ttl"
      (is (ssdb:ttl "not-exists-key")   -1)
      (is (ssdb:setx "key1" "value1" 1) "ok")
      (isnt (ssdb:ttl "key1")           -1)
      (is (ssdb:exists "key1")          t)
      (sleep 1.2)
      (is (ssdb:exists "key1")          nil))
    (subtest "Testing expire 1"
      (is (ssdb:set "key1" "value1")    "ok")
      (is (ssdb:expire "key1" 2)        t)
      (is (ssdb:exists "key1")          t)
      (sleep 2.1)
      (is (ssdb:exists "key1")          nil))
    (subtest "Testing expire 2"
      (is (ssdb:setx "key1" "value1" 1) "ok")
      ;; update ttl with ssdb:expire
      (is (ssdb:expire "key1" 2)        t)
      (is (ssdb:exists "key1")          t)
      (sleep 1.1)
      (isnt (ssdb:ttl "key1")           -1)
      (is (ssdb:exists "key1")          t)
      (sleep 1)
      (is (ssdb:ttl "key1")             -1)
      (is (ssdb:exists "key1")          nil))
    (subtest "Testing setnx"
      (is (ssdb:del "key1")             "ok")
      (is (ssdb:setnx "key1" "value2")  t)
      (is (ssdb:setnx "key1" "value2")  nil)
      (is (ssdb:del "key1")             "ok"))
    (subtest "Testing setbit getbit bitcount countbit"
      (is (ssdb:setbit "key1" 0 1)      0)
      (is (ssdb:setbit "key1" 0 1)      1)
      (is (ssdb:getbit "key1" 0)        1)
      (is (ssdb:setbit "key1" 0 0)      1)
      (is (ssdb:getbit "key1" 0)        0)
      (is (ssdb:bitcount "key1")        0)
      (is (ssdb:setbit "key1" 0 1)      0)
      (is (ssdb:setbit "key1" 1 0)      0)
      (is (ssdb:setbit "key1" 2 1)      0)
      (is (ssdb:getbit "key1" 0)        1)
      (is (ssdb:getbit "key1" 1)        0)
      (is (ssdb:getbit "key1" 2)        1)
      (is (ssdb:bitcount "key1")        2)
      (is (ssdb:bitcount "key1" 0 1)    2)
      (is (ssdb:bitcount "key1" 1 2)    0)
      (is (ssdb:bitcount "key1" 0 2)    2)
      (is (ssdb:bitcount "key1" 0 3)    2)
      (is (ssdb:bitcount "key1" 0 4)    2)
      (is (ssdb:bitcount "not-exists-key") 0)
      (is (ssdb:del "key1")             "ok"))
    (subtest "Testing setbit getbit bitcount countbit 2"
      (is (ssdb:del "key1")             "ok")
      (is (ssdb:set "key1" "a")         "ok")
      (is (ssdb:getbit "key1" 0)        1)
      (is (ssdb:getbit "key1" 1)        0)
      (is (ssdb:getbit "key1" 2)        0)
      (is (ssdb:getbit "key1" 3)        0)
      (is (ssdb:getbit "key1" 4)        0)
      (is (ssdb:getbit "key1" 5)        1)
      (is (ssdb:getbit "key1" 6)        1)
      (is (ssdb:getbit "key1" 7)        0)
      (is (ssdb:setbit "key1" 1 1)      0)
      (is (ssdb:setbit "key1" 0 0)      1)
      (is (ssdb:get "key1")             "b")
      (is (ssdb:del "key1")             "ok"))
    (subtest "Testing setbit getbit bitcount countbit 3"
      (is (ssdb:del "key1")             "ok")
      (is (ssdb:set "key1" "ac")        "ok")
      (is (ssdb:getbit "key1" 0)        1)
      (is (ssdb:getbit "key1" 1)        0)
      (is (ssdb:getbit "key1" 2)        0)
      (is (ssdb:getbit "key1" 3)        0)
      (is (ssdb:getbit "key1" 4)        0)
      (is (ssdb:getbit "key1" 5)        1)
      (is (ssdb:getbit "key1" 6)        1)
      (is (ssdb:getbit "key1" 7)        0)
      (is (ssdb:getbit "key1" 8)        1)
      (is (ssdb:getbit "key1" 9)        1)
      (is (ssdb:getbit "key1" 10)       0)
      (is (ssdb:getbit "key1" 11)       0)
      (is (ssdb:getbit "key1" 12)       0)
      (is (ssdb:getbit "key1" 13)       1)
      (is (ssdb:getbit "key1" 14)       1)
      (is (ssdb:getbit "key1" 15)       0)
      (is (ssdb:bitcount "key1")        7)
      (is (ssdb:bitcount "key1" 0 1)    7) ;; index by bytes, not bits
      (is (ssdb:bitcount "key1" 1 2)    4) ;; index by bytes, not bits
      (is (ssdb:setbit "key1" 1 1)      0)
      (is (ssdb:get "key1")             "cc")
      (is (ssdb:del "key1")             "ok"))
    (subtest "Testing substr strlen"
      (is (ssdb:strlen "not-exists-key") 0)
      (is (ssdb:set "key1" "value1")    "ok")
      (is (ssdb:strlen "key1")          6)
      (is (ssdb:substr "key1" 0 1)      "v")
      (is (ssdb:substr "key1" 0 2)      "va")
      (is (ssdb:substr "key1" 0 3)      "val")
      (is (ssdb:substr "key1" 1 3)      "alu")
      (is (ssdb:substr "key1" 0 7)      "value1")
      (is (ssdb:substr "key1" 0 8)      "value1")
      (is (ssdb:substr "key1" 1 7)      "alue1")
      (is (ssdb:del "key1")             "ok"))
    (subtest "Testing keys rkeys scan rscan"
      (is (ssdb:keys "" "" -1)          nil)
      (is (ssdb:set "key1" "value1")    "ok")
      (is (ssdb:keys "" "" -1)          '("key1") :test #'equal)
      (is (ssdb:set "key2" "value2")    "ok")
      (is (ssdb:keys "" "" -1)          '("key1" "key2") :test #'equal)
      (is (ssdb:del "key1")             "ok")
      (is (ssdb:keys "" "" -1)          '("key2") :test #'equal)
      (is (ssdb:del "key2")             "ok")
      (is (ssdb:keys "" "" -1)          nil))))

(finalize)
